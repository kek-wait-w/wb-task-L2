package pattern

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Strategy_pattern
*/

type Strategy interface {
	DoOperation(int, int) int
}

type AddStrategy struct{}

func (as *AddStrategy) DoOperation(num1, num2 int) int {
	return num1 + num2
}

type SubtractStrategy struct{}

func (ss *SubtractStrategy) DoOperation(num1, num2 int) int {
	return num1 - num2
}

type Context struct {
	strategy Strategy
}

func NewContext(strategy Strategy) *Context {
	return &Context{strategy: strategy}
}

func (c *Context) ExecuteStrategy(num1, num2 int) int {
	return c.strategy.DoOperation(num1, num2)
}

/*
Применимость паттерна:
Когда у вас есть несколько вариантов решения задачи и вы хотите, чтобы клиенты могли выбирать среди них.
Когда у вас есть одна задача, которую можно решить разными способами, и вы хотите, чтобы можно было изменять этот способ независимо от кода, который ее использует.
Когда у вас есть много похожих классов, отличающихся только поведением, и вы хотите избежать дублирования кода.

Плюсы:
Увеличивает гибкость кода, позволяя легко добавлять новые стратегии или изменять существующие.
Изолирует алгоритмы от клиентов, которые их используют, что облегчает тестирование и сопровождение кода.
Позволяет избежать усложнения классов за счет наследования, предоставляя возможность выбора стратегии на уровне объекта.

Минусы:
Увеличивает количество классов в программе из-за создания отдельных стратегий.
Может привести к усложнению клиентского кода, если используется неправильно или в ненужных местах.
Требует определения интерфейса для стратегий, что может потребовать дополнительной работы.

Примеры использования:
Визуализация сортировки в графических приложениях, где можно выбирать различные алгоритмы сортировки (например, быстрая сортировка, сортировка слиянием и т. д.).
Различные стратегии доставки товаров в интернет-магазинах (например, экспресс-доставка, стандартная доставка, самовывоз и т. д.).
*/
