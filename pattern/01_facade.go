package pattern

import _ "time"

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern
*/

//Обьект магазина
type Shop struct {
}

func (s *Shop) IsAvailable() bool {
	return true
}
func (s *Shop) Sell() {
}
func (s *Shop) СheckClientAccaunt() {
}

//Обьект склада
type Warehouse struct {
}

func (s *Warehouse) IsAvailable() bool {
	return true
}

//Фасад содержит в себе объект(ы) имеющий сложную логику. Используя методы объекта в своих собственных
//фасад упрощает работу с ними. Можно сократить до одной функции фасада
type Facade struct {
	S Shop
	W Warehouse
}

func NewFacade() *Facade {
	return &Facade{
		S: Shop{},
		W: Warehouse{},
	}
}

func (f *Facade) Sell() {
	if f.S.IsAvailable() || f.W.IsAvailable() {
		f.S.СheckClientAccaunt()
		f.S.Sell()
	}
}

func (f *Facade) IsAvailable() bool {
	return f.S.IsAvailable() || f.W.IsAvailable()
}

/*
**Фасад** — это структурный паттерн проектирования, который предоставляет простой интерфейс к сложной системе классов,
библиотеке или фреймворку.
## Преимущества и недостатки
+  Изолирует клиентов от компонентов сложной подсистемы.
-  Фасад рискует стать объектом, привязанным ко всем классам программы.
## Применимость
 Когда вам нужно представить простой или урезанный интерфейс к сложной подсистеме.
 Когда вы хотите разложить подсистему на отдельные слои.
 Фасад содержит в себе объект(ы) имеющий сложную логику. Используя методы объекта в своих собственных
Фасад упрощает работу с ними. Можно сократить до одной функции фасада
Это как надстройка над сложным объектом, которая в своих методах использует по несколько методов сложного объекта
*/
